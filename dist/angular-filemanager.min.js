/*!
 * Angular FileManager v1.0.1 (https://github.com/joni2back/angular-filemanager)
 * Jonas Sciangula Street <joni2back@gmail.com>
 * Licensed under MIT (https://github.com/joni2back/angular-filemanager/blob/master/LICENSE)
 */

(function(window, angular, $) {
    "use strict";
    var app = angular.module('FileManagerApp', ['pascalprecht.translate', 'ngCookies']);

    app.directive('angularFileManager', ['$parse', 'fileManagerConfig', function($parse, fileManagerConfig) {
        return {
            restrict: 'EA',
            templateUrl: fileManagerConfig.tplPath + '/index.html'
        };
    }]);

    app.directive('ngFile', ['$parse', function($parse) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var model = $parse(attrs.ngFile);
                var modelSetter = model.assign;

                element.bind('change', function() {
                    scope.$apply(function() {
                        modelSetter(scope, element[0].files);
                    });
                });
            }
        };
    }]);

    app.directive('ngRightClick', ['$parse', function($parse) {
        return function(scope, element, attrs) {
            var fn = $parse(attrs.ngRightClick);
            element.bind('contextmenu', function(event) {
                scope.$apply(function() {
                    event.preventDefault();
                    fn(scope, {$event: event});
                });
            });
        };
    }]);

    app.filter('strLimit', ['$filter', function($filter) {
        /*going to use css3 ellipsis instead of this*/
        return function(input, limit) {
            if (input.length <= limit) {
                return input;
            }
            return $filter('limitTo')(input, limit) + '...';
        };
    }]);

    /**
     * jQuery inits
     */
    var menuSelectors = '.main-navigation .table-files td a, .iconset a.thumbnail';

    $(window.document).on('shown.bs.modal', '.modal', function() {
        var self = this;
        var timer = setTimeout(function() {
            $('[autofocus]', self).focus();
            timer && clearTimeout(timer);
        }, 100);
    });

    $(window.document).on('click', function() {
        $("#context-menu").hide();
    });

    $(window.document).on('contextmenu', menuSelectors, function(e) {
        $("#context-menu").hide().css({
            left: e.pageX,
            top: e.pageY
        }).show();
        e.preventDefault();
    });

})(window, angular, jQuery);

(function(angular) {
    "use strict";
    angular.module('FileManagerApp').service('chmod', function () {

        var Chmod = function(initValue) {
            this.owner = this.getRwxObj();
            this.group = this.getRwxObj();
            this.others = this.getRwxObj();

            if (initValue) {
                var codes = isNaN(initValue) ?
                    this.convertfromCode(initValue):
                    this.convertfromOctal(initValue);

                if (! codes) {
                    throw new Error('Invalid input data');
                }

                this.owner = codes.owner;
                this.group = codes.group;
                this.others = codes.others;
            }
        };

        Chmod.prototype.toOctal = function(prepend, append) {
            var props = ['owner', 'group', 'others'];
            var result = [];
            for (var i in props) {
                var key = props[i];
                result[i]  = this[key].read  && this.octalValues.read  || 0;
                result[i] += this[key].write && this.octalValues.write || 0;
                result[i] += this[key].exec  && this.octalValues.exec  || 0;
            }
            return (prepend||'') + result.join('') + (append||'');
        };

        Chmod.prototype.toCode = function(prepend, append) {
            var props = ['owner', 'group', 'others'];
            var result = [];
            for (var i in props) {
                var key = props[i];
                result[i]  = this[key].read  && this.codeValues.read  || '-';
                result[i] += this[key].write && this.codeValues.write || '-';
                result[i] += this[key].exec  && this.codeValues.exec  || '-';
            }
            return (prepend||'') + result.join('') + (append||'');
        };

        Chmod.prototype.getRwxObj = function() {
            return {
                read: false,
                write: false,
                exec: false
            };
        };

        Chmod.prototype.octalValues = {
            read: 4, write: 2, exec: 1
        };

        Chmod.prototype.codeValues = {
            read: 'r', write: 'w', exec: 'x'
        };

        Chmod.prototype.convertfromCode = function (str) {
            str = ('' + str).replace(/\s/g, '');
            str = str.length === 10 ? str.substr(1) : str;
            if (! /^[-rwx]{9}$/.test(str)) {
                return;
            }

            var result = [], vals = str.match(/.{1,3}/g);
            for (var i in vals) {
                var rwxObj = this.getRwxObj();
                rwxObj.read  = /r/.test(vals[i]);
                rwxObj.write = /w/.test(vals[i]);
                rwxObj.exec  = /x/.test(vals[i]);
                result.push(rwxObj);
            }

            return {
                owner : result[0],
                group : result[1],
                others: result[2]
            };
        };

        Chmod.prototype.convertfromOctal = function (str) {
            str = ('' + str).replace(/\s/g, '');
            str = str.length === 4 ? str.substr(1) : str;
            if (! /^[0-7]{3}$/.test(str)) {
                return;
            }

            var result = [], vals = str.match(/.{1}/g);
            for (var i in vals) {
                var rwxObj = this.getRwxObj();
                rwxObj.read  = /[4567]/.test(vals[i]);
                rwxObj.write = /[2367]/.test(vals[i]);
                rwxObj.exec  = /[1357]/.test(vals[i]);
                result.push(rwxObj);
            }

            return {
                owner : result[0],
                group : result[1],
                others: result[2]
            };
        };

        return Chmod;
    });
})(angular);
// hello romane!!!
(function(angular) {
    "use strict";
    angular.module('FileManagerApp').constant("fileManagerConfig", {
        appName: "profireader file manager",
        defaultLang: "en",

        listUrl: "list/",
        uploadUrl: "upload/",
        renameUrl: "rename/",
        copyUrl: "copy/",
        removeUrl: "remove/",
        editUrl: "edit/",
        getContentUrl: "content/",
        createFolderUrl: "createdir/",
        downloadFileUrl: "download/",
        compressUrl: "compress/",
        extractUrl: "extract/",
        permissionsUrl: "permissions/",

        allowedActions: {
            rename: true,
            copy: true,
            edit: false,
            changePermissions: false,
            compress: false,
            compressChooseName: true,
            extract: true,
            download: true,
            preview: true,
            remove: true
        },

        enablePermissionsRecursive: true,

        isEditableFilePattern: /\.(txt|html?|aspx?|ini|pl|py|md|css|js|log|htaccess|htpasswd|json|sql|xml|xslt?|sh|rb|as|bat|cmd|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb)$/i,
        isImageFilePattern: /\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,
        isExtractableFilePattern: /\.(gz|tar|rar|g?zip)$/i,
        tplPath: 'assets/templates'
    });
})(angular);

(function(window, angular, $) {
    "use strict";
    angular.module('FileManagerApp').controller('FileManagerCtrl', [
    '$scope', '$translate', '$cookies', 'fileManagerConfig', 'item', 'fileNavigator', 'fileUploader',
    function($scope, $translate, $cookies, fileManagerConfig, Item, FileNavigator, FileUploader) {

        $scope.config = fileManagerConfig;
        $scope.appName = fileManagerConfig.appName;
        $scope.orderProp = ['model.type', 'model.name'];
        $scope.query = '';
        $scope.temp = new Item();
        $scope.fileNavigator = new FileNavigator();
        $scope.fileUploader = FileUploader;
        $scope.uploadFileList = [];
        $scope.viewTemplate = $cookies.viewTemplate || 'main-table.html';

        $scope.setTemplate = function(name) {
            $scope.viewTemplate = $cookies.viewTemplate = name;
        };

        $scope.changeLanguage = function (locale) {
            if (locale) {
                return $translate.use($cookies.language = locale);
            }
            $translate.use($cookies.language || fileManagerConfig.defaultLang);
        };

        $scope.touch = function(item) {
            item = (item && item.revert && item) || new Item();
            item.revert && item.revert();
            $scope.temp = item;
        };

        $scope.smartRightClick = function(item) {
            $scope.touch(item);
        };

        $scope.smartClick = function(item) {
            if (item.isFolder()) {
                return $scope.fileNavigator.folderClick(item);
            };
            if (item.isImage()) {
                return item.preview();
            }
            if (item.isEditable()) {
                item.getContent();
                $scope.touch(item);
                $('#edit').modal('show');
                return;
            }
        };

        $scope.edit = function(item) {
            item.edit(function() {
                $('#edit').modal('hide');
            });
        };

        $scope.changePermissions = function(item) {
            item.changePermissions(function() {
                $('#changepermissions').modal('hide');
            });
        };

        $scope.copy = function(item) {
            var samePath = item.tempModel.path.join() === item.model.path.join();
            if (samePath && $scope.fileNavigator.fileNameExists(item.tempModel.name)) {
                item.error = $translate.instant('error_invalid_filename');
                return false;
            }
            item.copy(function() {
                $scope.fileNavigator.refresh();
                $('#copy').modal('hide');
            });
        };

        $scope.compress = function(item) {
            item.compress(function() {
                item.success = true;
                $scope.fileNavigator.refresh();
            }, function() {
                item.success = false;
            });
        };

        $scope.extract = function(item) {
            item.extract(function() {
                item.success = true;
                $scope.fileNavigator.refresh();
            }, function() {
                item.success = false;
            });
        };

        $scope.remove = function(item) {
            item.remove(function() {
                $scope.fileNavigator.refresh();
                $('#delete').modal('hide');
            });
        };

        $scope.rename = function(item) {
            var samePath = item.tempModel.path.join() === item.model.path.join();
            if (samePath && $scope.fileNavigator.fileNameExists(item.tempModel.name)) {
                item.error = $translate.instant('error_invalid_filename');
                return false;
            }
            item.rename(function() {
                $scope.fileNavigator.refresh();
                $('#rename').modal('hide');
            });
        };

        $scope.createFolder = function(item) {
            var name = item.tempModel.name && item.tempModel.name.trim();
            item.tempModel.type = 'dir';
            item.tempModel.parent_id = $scope.fileNavigator.currentId()
            item.tempModel.path = $scope.fileNavigator.currentPath;
            if (name && !$scope.fileNavigator.fileNameExists(name)) {
                item.createFolder(function() {
                    $scope.fileNavigator.refresh();
                    $('#newfolder').modal('hide');
                });
            } else {
                $scope.temp.error = $translate.instant('error_invalid_filename');
                return false;
            }
        };

        $scope.uploadFiles = function() {
            $scope.fileUploader.upload($scope.uploadFileList, $scope.fileNavigator.currentId()).success(function() {
                $scope.fileNavigator.refresh();
                $('#uploadfile').modal('hide');
            }).error(function(data) {
                var errorMsg = data.result && data.result.error || $translate.instant('error_uploading_files');
                $scope.temp.error = errorMsg;
            });
        };

        $scope.getQueryParam = function(param) {
            var found;
            window.location.search.substr(1).split("&").forEach(function(item) {
                if (param ===  item.split("=")[0]) {
                    found = item.split("=")[1];
                }
            });
            return found;
        };

        $scope.changeLanguage($scope.getQueryParam('lang'));
        $scope.isWindows = $scope.getQueryParam('server') === 'Windows';
        $scope.fileNavigator.refresh();

    }]);
})(window, angular, jQuery);

(function(angular) {
    "use strict";
    angular.module('FileManagerApp').service('fileNavigator', [
        '$http', 'fileManagerConfig', 'item', function ($http, fileManagerConfig, Item) {

        $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

        var FileNavigator = function() {
            this.requesting = false;
            this.fileList = [];
            this.currentPath = [];
            this.IdPath = [];
            this.items = [];
            this.history = [];
            this.error = '';
            this.itemsById = []; //array of objects
            //this.names = [];
        };

        FileNavigator.prototype.currentId = function() {
             var self = this;
             return (self.IdPath.length ? self.IdPath[self.IdPath.length-1]: '');
        }

        FileNavigator.prototype.refresh = function(success, error) {
            var self = this;
            var path = self.currentPath.join('/');
            var data = {params: {
                mode: "list",
                onlyFolders: false,
                path: '/' + path,
                parent_id: self.currentId()
            }};
            //console.log(data, self.IdPath);
            self.requesting = true;
            self.fileList = [];
            self.error = '';
            $http.post(fileManagerConfig.listUrl, data).success(function(data) {
                self.fileList = [];
                angular.forEach(data.result, function(file) {
                    self.fileList.push(new Item(file, self.currentPath));
                    //console.log('file.id='+ file.id);
                    //console.log('file.parent_id='+ file.parent_id);
                    if(!self.itemsById[file.id]) {
                        self.itemsById[file.id]={};
                        self.itemsById[file.id].parent_id = file.parent_id;
                    }
                });
                //console.log('self.fileList='+self.fileList);
                //console.log('self.currentPath='+self.currentPath);
                //self.itemsById[item.model.id][parent_id] = item.model.parent_id;
                self.requesting = false;
                self.buildTree(path);

                if (data.error) {
                    self.error = data.error;
                    return typeof error === 'function' && error(data);
                }
                typeof success === 'function' && success(data);
            }).error(function(data) {
                self.requesting = false;
                typeof error === 'function' && error(data);
            });
        };

        FileNavigator.prototype.buildTree = function(path) {
            var self = this;
            function recursive(parent, file, path) {
                //console.log('parent=', parent, 'file=', file, 'path=', path);
                var absName = path ? (path + '/' + file.name) : file.name;
                if (parent.name.trim() && path.trim().indexOf(parent.name) !== 0) {
                    parent.nodes = [];
                }
                if (parent.name !== path) {
                    for (var i in parent.nodes) {
                        recursive(parent.nodes[i], file, path);
                    }
                } else {
                    for (var e in parent.nodes) {
                        if (parent.nodes[e].name === absName) {
                            return;
                        }
                    }
                    parent.nodes.push({model: file, name: absName, nodes: []});
                }
                parent.nodes = parent.nodes.sort(function(a, b) {
                    return a.name < b.name ? -1 : a.name === b.name ? 0 : 1;
                });
            };

            !self.history.length && self.history.push({name: path, nodes: []});
            for (var o in self.fileList) {
                var item = self.fileList[o];
                item.isFolder() && recursive(self.history[0], item.model, path);
            }
            console.log('self.history=',self.history);
            console.log('self.items=',self.items);
            console.log('self.itemsById=',self.itemsById);
        };

        //FileNavigator.prototype.folderClickByName = function(fullPath) {
        //    console.log('error. fix folderClickByName. for now id by name is not retrived')
        //    console.log(fullPath, self);
        //    var self = this;
        //    fullPath = fullPath.replace(/^\/*/g, '').split('/');
        //    self.currentPath = fullPath && fullPath[0] === "" ? [] : fullPath;
        //    self.refresh();
        //};

        /*returns index, not item itself*/
        FileNavigator.prototype.findItemById = function(id){
            var present = null;
            angular.forEach(self.items,function(element, index){
                if(id == item.model.id) {
                    present = index;
                }
            });
            return present;
        };

        FileNavigator.prototype.folderClick = function(item) {
            //console.log('item=',item);
            var self = this;
            if (item && item.model.type === 'dir') {
                item.model.opened = !item.model.opened;
                if(!item.model.opened) {
                    //self.items.length = self.findItemById(item.model.parent_id) + 1;
                }
                self.currentPath.push(item.model.name);//must be deprecated
                var present = -1;// Is node already there?
                angular.forEach(self.IdPath,function(element, index){
                    if(element == item.model.id) {
                        present = index;
                    }
                });
                if(present > -1) {
                    //console.log('splice');
                    //self.IdPath.length = present + 1;
                    //self.items.length = present + 1;
                    //self.IdPath = self.IdPath.slice(0, present);
                }   else {
                    //console.log('push');
                    self.IdPath.push(item.model.id); // better wäre self.IdPath.push(item.model);
                    self.items.push(item);
                    //self.names[item.model.id] = item.model.name;
                }
                //removeSiblings();
                //self.IdPath.push(item.model.id);
                //console.log('self.IdPath='+self.IdPath);
                //console.log('self.items='+self.items[self.items.length-1].name);
                self.refresh();
            }
        };

        FileNavigator.prototype.upDir = function() {
            var self = this;
            if (self.currentPath[0]) {
                self.currentPath = self.currentPath.slice(0, -1);
                self.IdPath = self.IdPath.slice(0, -1);
                self.refresh();
            }
        };

        FileNavigator.prototype.goTo = function(index) {
            var self = this;
            self.currentPath = self.currentPath.slice(0, index + 1);
            self.IdPath = self.IdPath.slice(0, index + 1);
            self.refresh();
        };

        FileNavigator.prototype.fileNameExists = function(fileName) {
            var self = this;
            for (var item in self.fileList) {
                item = self.fileList[item];
                if (fileName.trim && item.model.name.trim() === fileName.trim()) {
                    return true;
                }
            }
        };

        FileNavigator.prototype.listHasFolders = function() {
            var self = this;
            for (var item in self.fileList) {
                if (self.fileList[item].model.type === 'dir') {
                    return true;
                }
            }
        };

        return FileNavigator;
    }]);
})(angular);
(function(window, angular) {
    "use strict";
    angular.module('FileManagerApp').service('fileUploader', ['$http', 'fileManagerConfig', function ($http, fileManagerConfig) {

        var self = this;
        self.requesting = false; 
        self.upload = function(fileList, parent_id) {
            var form = new window.FormData();  
            form.append('parent_id', parent_id);

            for (var i = 0; i < fileList.length; i++) {
                var fileObj = fileList.item(i);
                fileObj instanceof window.File && form.append('file-' + i, fileObj);
            }

            self.requesting = true;
            return $http.post(fileManagerConfig.uploadUrl, form, {
                transformRequest: angular.identity,
                headers: {
                    "Content-Type": undefined
                }
            }).success(function(data) {
                self.inprocess = false;
            }).error(function(data) {
                self.inprocess = false;
            });
        };
    }]);
})(window, angular);
(function(window, angular, $) {
    "use strict";
    angular.module('FileManagerApp').factory('item', ['$http', '$translate', 'fileManagerConfig', 'chmod', function($http, $translate, fileManagerConfig, Chmod) {

        var Item = function(model, path) {
            var rawModel = {
                name: model && model.name || '',
                path: path || [],
                type: model && model.type || 'file',
                id: model && model.id || '',
                parent_id: model && model.parent_id || '',
                size: model && model.size || 0,
                date: convertDate(model && model.date),
                perms: new Chmod(model && model.rights),
                content: model && model.content || '',
                recursive: false,
                opened: false,//maybe it's not a very good place, `cause it's view-concerned, but I'd like not to build additional structures
                sizeKb: function() {
                    return Math.round(this.size / 1024, 1);
                },
                fullPath: function() {
                    return ('/' + this.path.join('/') + '/' + this.name).replace(/\/\//, '/');
                }
            };

            this.error = '';
            this.inprocess = false;

            this.model = angular.copy(rawModel);
            this.tempModel = angular.copy(rawModel);

            function convertDate(mysqlDate) {
                var d = (mysqlDate || '').toString().split(/[- :]/);
                return new Date(d[0], d[1] - 1, d[2], d[3], d[4], d[5]);
            }
        };

        Item.prototype.update = function() {
            angular.extend(this.model, angular.copy(this.tempModel));
            return this;
        };

        Item.prototype.revert = function() {
            angular.extend(this.tempModel, angular.copy(this.model));
            this.error = '';
            return this;
        };

        Item.prototype.defineCallback = function(data, success, error) {
            /* Check if there was some error in a 200 response */
            var self = this;
            if (data.result && data.result.error) {
                self.error = data.result.error;
                return typeof error === 'function' && error(data);
            }
            if (data.error) {
                self.error = data.error.message;
                return typeof error === 'function' && error(data);
            }
            self.update();
            return typeof success === 'function' && success(data);
        };

        Item.prototype.createFolder = function(success, error) {
            var self = this;
            var data = {params: {
                mode: "addfolder",
                path: self.tempModel.path.join('/'),
                parent_id: self.tempModel.parent_id,
                name: self.tempModel.name
            }};

            if (self.tempModel.name.trim()) {
                self.inprocess = true;
                self.error = '';
                return $http.post(fileManagerConfig.createFolderUrl, data).success(function(data) {
                    self.defineCallback(data, success, error);
                }).error(function(data) {
                    self.error = data.result && data.result.error ?
                        data.result.error:
                        $translate.instant('error_creating_folder');
                    typeof error === 'function' && error(data);
                })['finally'](function() {
                    self.inprocess = false;
                });
            }
        };

        Item.prototype.rename = function(success, error) {
            var self = this;
            var data = {params: {
                "mode": "rename",
                "path": self.model.fullPath(),
                "newPath": self.tempModel.fullPath()
            }};
            if (self.tempModel.name.trim()) {
                self.inprocess = true;
                self.error = '';
                return $http.post(fileManagerConfig.renameUrl, data).success(function(data) {
                    self.defineCallback(data, success, error);
                }).error(function(data) {
                    self.error = data.result && data.result.error ?
                        data.result.error:
                        $translate.instant('error_renaming');
                    typeof error === 'function' && error(data);
                })['finally'](function() {
                    self.inprocess = false;
                });
            }
        };

        Item.prototype.copy = function(success, error) {
            var self = this;
            var data = {params: {
                mode: "copy",
                path: self.model.fullPath(),
                newPath: self.tempModel.fullPath()
            }};
            if (self.tempModel.name.trim()) {
                self.inprocess = true;
                self.error = '';
                return $http.post(fileManagerConfig.copyUrl, data).success(function(data) {
                    self.defineCallback(data, success, error);
                }).error(function(data) {
                    self.error = data.result && data.result.error ?
                        data.result.error:
                        $translate.instant('error_copying');
                    typeof error === 'function' && error(data);
                })['finally'](function() {
                    self.inprocess = false;
                });
            }
        };

        Item.prototype.compress = function(success, error) {
            //var self = this;
            //var data = {params: {
            //    mode: "compress",
            //    path: self.model.fullPath(),
            //    destination: self.tempModel.fullPath()
            //}};
            //if (self.tempModel.name.trim()) {
            //    self.inprocess = true;
            //    self.error = '';
            //    return $http.post(fileManagerConfig.compressUrl, data).success(function(data) {
            //        self.defineCallback(data, success, error);
            //    }).error(function(data) {
            //        self.error = data.result && data.result.error ?
            //            data.result.error:
            //            $translate.instant('error_compressing');
            //        typeof error === 'function' && error(data);
            //    })['finally'](function() {
            //        self.inprocess = false;
            //    });
            //}
        };

        Item.prototype.extract = function(success, error) {
            //var self = this;
            //var data = {params: {
            //    mode: "extract",
            //    path: self.model.fullPath(),
            //    sourceFile: self.model.fullPath(),
            //    destination: self.tempModel.fullPath()
            //}};
            //
            //self.inprocess = true;
            //self.error = '';
            //return $http.post(fileManagerConfig.extractUrl, data).success(function(data) {
            //    self.defineCallback(data, success, error);
            //}).error(function(data) {
            //    self.error = data.result && data.result.error ?
            //        data.result.error:
            //        $translate.instant('error_extracting');
            //    typeof error === 'function' && error(data);
            //})["finally"](function() {
            //    self.inprocess = false;
            //});
        };

        Item.prototype.download = function(preview) {
            var self = this;
            var data = {
                mode: "download",
                preview: preview,
                path: self.model.fullPath()
            };
            var url = [fileManagerConfig.downloadFileUrl, $.param(data)].join('?');
            if (self.model.type !== 'dir') {
                window.open(url, '_blank', '');
            }
        };

        Item.prototype.preview = function() {
            var self = this;
            return self.download(true);
        };

        Item.prototype.getContent = function(success, error) {
            var self = this;
            var data = {params: {
                mode: "editfile",
                path: self.tempModel.fullPath()
            }};
            self.inprocess = true;
            self.error = '';
            return $http.post(fileManagerConfig.getContentUrl, data).success(function(data) {
                self.tempModel.content = self.model.content = data.result;
                self.defineCallback(data, success, error);
            }).error(function(data) {
                self.error = data.result && data.result.error ?
                    data.result.error:
                    $translate.instant('error_getting_content');
                typeof error === 'function' && error(data);
            })['finally'](function() {
                self.inprocess = false;
            });
        };

        Item.prototype.remove = function(success, error) {
            var self = this;
            var data = {params: {
                mode: "delete",
                path: self.tempModel.fullPath()
            }};
            self.inprocess = true;
            self.error = '';
            return $http.post(fileManagerConfig.removeUrl, data).success(function(data) {
                self.defineCallback(data, success, error);
            }).error(function(data) {
                self.error = data.result && data.result.error ?
                    data.result.error:
                    $translate.instant('error_deleting');
                typeof error === 'function' && error(data);
            })['finally'](function() {
                self.inprocess = false;
            });
        };

        Item.prototype.edit = function(success, error) {
            var self = this;
            var data = {params: {
                mode: "savefile",
                content: self.tempModel.content,
                path: self.tempModel.fullPath()
            }};
            self.inprocess = true;
            self.error = '';

            return $http.post(fileManagerConfig.editUrl, data).success(function(data) {
                self.defineCallback(data, success, error);
            }).error(function(data) {
                self.error = data.result && data.result.error ?
                    data.result.error:
                    $translate.instant('error_modifying');
                typeof error === 'function' && error(data);
            })['finally'](function() {
                self.inprocess = false;
            });
        };

        Item.prototype.changePermissions = function(success, error) {
            //var self = this;
            //var data = {params: {
            //    mode: "changepermissions",
            //    path: self.tempModel.fullPath(),
            //    perms: self.tempModel.perms.toOctal(),
            //    permsCode: self.tempModel.perms.toCode(),
            //    recursive: self.tempModel.recursive
            //}};
            //self.inprocess = true;
            //self.error = '';
            //return $http.post(fileManagerConfig.permissionsUrl, data).success(function(data) {
            //    self.defineCallback(data, success, error);
            //}).error(function(data) {
            //    self.error = data.result && data.result.error ?
            //        data.result.error:
            //        $translate.instant('error_changing_perms');
            //    typeof error === 'function' && error(data);
            //})['finally'](function() {
            //    self.inprocess = false;
            //});
        };

        Item.prototype.isFolder = function() {
            return this.model.type === 'dir';
        };

        Item.prototype.isEditable = function() {
            return !this.isFolder() && fileManagerConfig.isEditableFilePattern.test(this.model.name);
        };

        Item.prototype.isImage = function() {
            return fileManagerConfig.isImageFilePattern.test(this.model.name);
        };

        Item.prototype.isCompressible = function() {
            return this.isFolder();
        };

        Item.prototype.isExtractable = function() {
            return !this.isFolder() && fileManagerConfig.isExtractableFilePattern.test(this.model.name);
        };

        return Item;
    }]);
})(window, angular, jQuery);

(function(angular, $) {
    "use strict";
    angular.module('FileManagerApp').controller('ModalFileManagerCtrl', [
        '$scope', '$rootScope', 'fileManagerConfig', 'fileNavigator',
        function($scope, $rootScope, fileManagerConfig, FileNavigator) {

        $scope.appName = fileManagerConfig.appName;
        $scope.orderProp = ['model.type', 'model.name'];
        $scope.fileNavigator = new FileNavigator();

        $rootScope.select = function(item, temp) {
            temp.tempModel.path = item.model.fullPath().split('/');
            $('#selector').modal('hide');
        };

        $rootScope.openNavigator = function(item) {
            $scope.fileNavigator.currentPath = item.model.path.slice();
            $scope.fileNavigator.refresh();
            $('#selector').modal('show');
        };

    }]);
})(angular, jQuery);
(function(angular) {
    "use strict";
    angular.module('FileManagerApp').config(['$translateProvider', function($translateProvider) {
        $translateProvider.translations('en', {
            filemanager: "File Manager",
            language: "Language",
            english: "English",
            spanish: "Spanish",
            portuguese: "Portuguese",
            french: "French",
            confirm: "Confirm",
            cancel: "Cancel",
            close: "Close",
            upload_file: "Upload file",
            files_will_uploaded_to: "Files will be uploaded to",
            uploading: "Uploading",
            permissions: "Permissions",
            select_destination_folder: "Select the destination folder",
            source: "Source",
            destination: "Destination",
            copy_file: "Copy file",
            sure_to_delete: "Are you sure to delete",
            change_name_move: "Change name / move",
            enter_new_name_for: "Enter new name for",
            extract_item: "Extract item",
            extraction_started: "Extraction started in a background process",
            compression_started: "Compression started in a background process",
            enter_folder_name_for_extraction: "Enter the folder name for the extraction of",
            enter_folder_name_for_compression: "Enter the folder name for the compression of",
            toggle_fullscreen: "Toggle fullscreen",
            edit_file: "Edit file",
            file_content: "File content",
            loading: "Loading",
            search: "Search",
            create_folder: "Create folder",
            create: "Create",
            folder_name: "Folder name",
            upload: "Upload",
            change_permissions: "Change permissions",
            change: "Change",
            details: "Details",
            icons: "Icons",
            list: "List",
            name: "Name",
            size: "Size",
            actions: "Actions",
            date: "Date",
            no_files_in_folder: "No files in this folder",
            no_folders_in_folder: "This folder not contains children folders",
            select_this: "Select this",
            go_back: "Go back",
            wait: "Wait",
            move: "Move",
            download: "Download",
            view_item: "View item",
            remove: "Delete",
            edit: "Edit",
            copy: "Copy",
            rename: "Rename",
            extract: "Extract",
            compress: "Compress",
            error_invalid_filename: "Invalid filename or already exists, specify another name",
            error_modifying: "An error occurred modifying the file",
            error_deleting: "An error occurred deleting the file or folder",
            error_renaming: "An error occurred renaming the file",
            error_copying: "An error occurred copying the file",
            error_compressing: "An error occurred compressing the file or folder",
            error_extracting: "An error occurred extracting the file",
            error_creating_folder: "An error occurred creating the folder",
            error_getting_content: "An error occurred getting the content of the file",
            error_changing_perms: "An error occurred changing the permissions of the file",
            error_uploading_files: "An error occurred uploading files",
            sure_to_start_compression_with: "Are you sure to compress",
            owner: "Owner",
            group: "Group",
            others: "Others",
            read: "Read",
            write: "Write",
            exec: "Exec",
            original: "Original",
            changes: "Changes",
            recursive: "Recursive"
        });

        $translateProvider.translations('pt', {
            filemanager: "Gerenciador de arquivos",
            language: "Língua",
            english: "Inglês",
            spanish: "Espanhol",
            portuguese: "Portugues",
            french: "Francês",
            confirm: "Confirmar",
            cancel: "Cancelar",
            close: "Fechar",
            upload_file: "Carregar arquivo",
            files_will_uploaded_to: "Os arquivos serão enviados para",
            uploading: "Carregar",
            permissions: "Autorizações",
            select_destination_folder: "Selecione a pasta de destino",
            source: "Origem",
            destination: "Destino",
            copy_file: "Copiar arquivo",
            sure_to_delete: "Tem certeza de que deseja apagar",
            change_name_move: "Renomear / mudança",
            enter_new_name_for: "Digite o novo nome para",
            extract_item: "Extrair arquivo",
            extraction_started: "A extração começou em um processo em segundo plano",
            compression_started: "A compressão começou em um processo em segundo plano",
            enter_folder_name_for_extraction: "Digite o nome da pasta para a extração de",
            enter_folder_name_for_compression: "Digite o nome da pasta para Compressão",
            toggle_fullscreen: "Ativar/desativar tela cheia",
            edit_file: "Editar arquivo",
            file_content: "Conteúdo do arquivo",
            loading: "Carregando",
            search: "Localizar",
            create_folder: "Criar Pasta",
            create: "Criar",
            folder_name: "Nome da pasta",
            upload: "Fazer",
            change_permissions: "Alterar permissões",
            change: "Alterar",
            details: "Detalhes",
            icons: "Icones",
            list: "Lista",
            name: "Nome",
            size: "Tamanho",
            actions: "Ações",
            date: "Data",
            no_files_in_folder: "Não há arquivos nesta pasta",
            no_folders_in_folder: "Esta pasta não contém subpastas",
            select_this: "Selecione esta",
            go_back: "Voltar",
            wait: "Espere",
            move: "Mover",
            download: "Baixar",
            view_item: "Veja o arquivo",
            remove: "Excluir",
            edit: "Editar",
            copy: "Copiar",
            rename: "Renomear",
            extract: "Extrair",
            compress: "Comprimir",
            error_invalid_filename: "Nome do arquivo inválido ou nome de arquivo já existe, especifique outro nome",
            error_modifying: "Ocorreu um erro ao modificar o arquivo",
            error_deleting: "Ocorreu um erro ao excluir o arquivo ou pasta",
            error_renaming: "Ocorreu um erro ao mudar o nome do arquivo",
            error_copying: "Ocorreu um erro ao copiar o arquivo",
            error_compressing: "Ocorreu um erro ao comprimir o arquivo ou pasta",
            error_extracting: "Ocorreu um erro ao extrair o arquivo",
            error_creating_folder: "Ocorreu um erro ao criar a pasta",
            error_getting_content: "Ocorreu um erro ao obter o conteúdo do arquivo",
            error_changing_perms: "Ocorreu um erro ao alterar as permissões do arquivo",
            error_uploading_files: "Ocorreu um erro upload de arquivos",
            sure_to_start_compression_with: "Tem certeza que deseja comprimir",
            owner: "Proprietário",
            group: "Grupo",
            others: "Outros",
            read: "Leitura",
            write: "Escrita ",
            exec: "Execução",
            original: "Original",
            changes: "Mudanças",
            recursive: "Recursiva"
        });

        $translateProvider.translations('es', {
            filemanager: "Administrador de archivos",
            language: "Idioma",
            english: "Ingles",
            spanish: "Español",
            portuguese: "Portugues",
            french: "Francés",
            confirm: "Confirmar",
            cancel: "Cancelar",
            close: "Cerrar",
            upload_file: "Subir archivo",
            files_will_uploaded_to: "Los archivos seran subidos a",
            uploading: "Subiendo",
            permissions: "Permisos",
            select_destination_folder: "Seleccione la carpeta de destino",
            source: "Origen",
            destination: "Destino",
            copy_file: "Copiar archivo",
            sure_to_delete: "Esta seguro que desea eliminar",
            change_name_move: "Renombrar / mover",
            enter_new_name_for: "Ingrese el nuevo nombre para",
            extract_item: "Extraer archivo",
            extraction_started: "La extraccion ha comenzado en un proceso de segundo plano",
            compression_started: "La compresion ha comenzado en un proceso de segundo plano",
            enter_folder_name_for_extraction: "Ingrese el nombre de la carpeta para la extraccion de",
            enter_folder_name_for_compression: "Ingrese el nombre de la carpeta para la compresion de",
            toggle_fullscreen: "Activar/Desactivar pantalla completa",
            edit_file: "Editar archivo",
            file_content: "Contenido del archivo",
            loading: "Cargando",
            search: "Buscar",
            create_folder: "Crear carpeta",
            create: "Crear",
            folder_name: "Nombre de la carpeta",
            upload: "Subir",
            change_permissions: "Cambiar permisos",
            change: "Cambiar",
            details: "Detalles",
            icons: "Iconos",
            list: "Lista",
            name: "Nombre",
            size: "Tamaño",
            actions: "Acciones",
            date: "Fecha",
            no_files_in_folder: "No hay archivos en esta carpeta",
            no_folders_in_folder: "Esta carpeta no contiene sub-carpetas",
            select_this: "Seleccionar esta",
            go_back: "Volver",
            wait: "Espere",
            move: "Mover",
            download: "Descargar",
            view_item: "Ver archivo",
            remove: "Eliminar",
            edit: "Editar",
            copy: "Copiar",
            rename: "Renombrar",
            extract: "Extraer",
            compress: "Comprimir",
            error_invalid_filename: "El nombre del archivo es invalido o ya existe",
            error_modifying: "Ocurrio un error al intentar modificar el archivo",
            error_deleting: "Ocurrio un error al intentar eliminar el archivo",
            error_renaming: "Ocurrio un error al intentar renombrar el archivo",
            error_copying: "Ocurrio un error al intentar copiar el archivo",
            error_compressing: "Ocurrio un error al intentar comprimir el archivo",
            error_extracting: "Ocurrio un error al intentar extraer el archivo",
            error_creating_folder: "Ocurrio un error al intentar crear la carpeta",
            error_getting_content: "Ocurrio un error al obtener el contenido del archivo",
            error_changing_perms: "Ocurrio un error al cambiar los permisos del archivo",
            error_uploading_files: "Ocurrio un error al subir archivos",
            sure_to_start_compression_with: "Esta seguro que desea comprimir",
            owner: "Propietario",
            group: "Grupo",
            others: "Otros",
            read: "Lectura",
            write: "Escritura",
            exec: "Ejecucion",
            original: "Original",
            changes: "Cambios",
            recursive: "Recursivo"
        });
        $translateProvider.translations('fr', {
            filemanager: "Gestionnaire de fichier",
            language: "Langue",
            english: "Anglais",
            spanish: "Espagnol",
            portuguese: "Portugais",
            french: "Français",
            confirm: "Confirmer",
            cancel: "Annuler",
            close: "Fermer",
            upload_file: "Uploader un fichier",
            files_will_uploaded_to: "Les fichiers seront uploadé dans",
            uploading: "Upload en cours",
            permissions: "Permissions",
            select_destination_folder: "Sélectionné le dossier de destination",
            source: "Source",
            destination: "Destination",
            copy_file: "Copier le fichier",
            sure_to_delete: "Êtes-vous sûr de vouloir supprimer",
            change_name_move: "Renommer / Déplacer",
            enter_new_name_for: "Entrer le nouveau nom pour",
            extract_item: "Extraires les éléments",
            extraction_started: "L'extraction a démarré en tâche de fond",
            compression_started: "La compression a démarré en tâche de fond",
            enter_folder_name_for_extraction: "Entrer le nom du dossier pour l'extraction de",
            enter_folder_name_for_compression: "Entrer le nom du dossier pour la compression de",
            toggle_fullscreen: "Basculer en plein écran",
            edit_file: "Éditer le fichier",
            file_content: "Contenu du fichier",
            loading: "Chargement en cours",
            search: "Recherche",
            create_folder: "Créer un dossier",
            create: "Créer",
            folder_name: "Nom du dossier",
            upload: "Upload",
            change_permissions: "Changer les permissions",
            change: "Changer",
            details: "Details",
            icons: "Icons",
            list: "Liste",
            name: "Nom",
            size: "Taille",
            actions: "Actions",
            date: "Date",
            no_files_in_folder: "Aucun fichier dans ce dossier",
            no_folders_in_folder: "Ce dossier ne contiens pas de dossier",
            select_this: "Sélectionner",
            go_back: "Retour",
            wait: "Patienter",
            move: "Déplacer",
            download: "Télécharger",
            view_item: "Voir l'élément",
            remove: "Supprimer",
            edit: "Éditer",
            copy: "Copier",
            rename: "Renommer",
            extract: "Extraire",
            compress: "Compresser",
            error_invalid_filename: "Nom de fichier invalide ou déjà existant, merci de spécifier un autre nom",
            error_modifying: "Une erreur est survenue pendant la modification du fichier",
            error_deleting: "Une erreur est survenue pendant la suppression du fichier ou du dossier",
            error_renaming: "Une erreur est survenue pendant le renommage du fichier",
            error_copying: "Une erreur est survenue pendant la copie du fichier",
            error_compressing: "Une erreur est survenue pendant la compression du fichier ou du dossier",
            error_extracting: "Une erreur est survenue pendant l'extraction du fichier",
            error_creating_folder: "Une erreur est survenue pendant la création du dossier",
            error_getting_content: "Une erreur est survenue pendant la récupération du contenu du fichier",
            error_changing_perms: "Une erreur est survenue pendant le changement des permissions du fichier",
            error_uploading_files: "Une erreur est survenue pendant l'upload des fichiers",
            sure_to_start_compression_with: "Êtes-vous sûre de vouloir compresser",
            owner: "Propriétaire",
            group: "Groupe",
            others: "Autres",
            read: "Lecture",
            write: "Écriture",
            exec: "Éxécution",
            original: "Original",
            changes: "Modifications",
            recursive: "Récursif"
        });
    }]);
})(angular);
